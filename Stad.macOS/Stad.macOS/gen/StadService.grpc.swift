//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: StadService.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Stad_Client_StadServiceClient`, then call methods of this protocol to make API calls.
public protocol Stad_Client_StadServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Stad_Client_StadServiceClientInterceptorFactoryProtocol? { get }

  func sayHello(
    _ request: Stad_Client_HelloRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stad_Client_HelloRequest, Stad_Client_HelloReply>

  func terminate(
    _ request: Stad_Client_TerminateRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stad_Client_TerminateRequest, Stad_Client_TerminateReply>

  func loadAssemblySource(
    _ request: Stad_Client_LoadAssemblyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Stad_Client_LoadAssemblyRequest, Stad_Client_LoadAssemblyReply>
}

extension Stad_Client_StadServiceClientProtocol {
  public var serviceName: String {
    return "stad.client.StadService"
  }

  /// Application
  ///
  /// - Parameters:
  ///   - request: Request to send to SayHello.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sayHello(
    _ request: Stad_Client_HelloRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stad_Client_HelloRequest, Stad_Client_HelloReply> {
    return self.makeUnaryCall(
      path: "/stad.client.StadService/SayHello",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
    )
  }

  /// Unary call to Terminate
  ///
  /// - Parameters:
  ///   - request: Request to send to Terminate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func terminate(
    _ request: Stad_Client_TerminateRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stad_Client_TerminateRequest, Stad_Client_TerminateReply> {
    return self.makeUnaryCall(
      path: "/stad.client.StadService/Terminate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
    )
  }

  /// Unary call to LoadAssemblySource
  ///
  /// - Parameters:
  ///   - request: Request to send to LoadAssemblySource.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func loadAssemblySource(
    _ request: Stad_Client_LoadAssemblyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Stad_Client_LoadAssemblyRequest, Stad_Client_LoadAssemblyReply> {
    return self.makeUnaryCall(
      path: "/stad.client.StadService/LoadAssemblySource",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoadAssemblySourceInterceptors() ?? []
    )
  }
}

public protocol Stad_Client_StadServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'sayHello'.
  func makeSayHelloInterceptors() -> [ClientInterceptor<Stad_Client_HelloRequest, Stad_Client_HelloReply>]

  /// - Returns: Interceptors to use when invoking 'terminate'.
  func makeTerminateInterceptors() -> [ClientInterceptor<Stad_Client_TerminateRequest, Stad_Client_TerminateReply>]

  /// - Returns: Interceptors to use when invoking 'loadAssemblySource'.
  func makeLoadAssemblySourceInterceptors() -> [ClientInterceptor<Stad_Client_LoadAssemblyRequest, Stad_Client_LoadAssemblyReply>]
}

public final class Stad_Client_StadServiceClient: Stad_Client_StadServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions
  public var interceptors: Stad_Client_StadServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the stad.client.StadService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  public init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Stad_Client_StadServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Stad_Client_StadServiceProvider: CallHandlerProvider {
  var interceptors: Stad_Client_StadServiceServerInterceptorFactoryProtocol? { get }

  /// Application
  func sayHello(request: Stad_Client_HelloRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stad_Client_HelloReply>

  func terminate(request: Stad_Client_TerminateRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stad_Client_TerminateReply>

  func loadAssemblySource(request: Stad_Client_LoadAssemblyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Stad_Client_LoadAssemblyReply>
}

extension Stad_Client_StadServiceProvider {
  public var serviceName: Substring { return "stad.client.StadService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(
    _ methodName: Substring,
    callHandlerContext: CallHandlerContext
  ) -> GRPCCallHandler? {
    switch methodName {
    case "SayHello":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeSayHelloInterceptors() ?? []
      ) { context in
        return { request in
          self.sayHello(request: request, context: context)
        }
      }

    case "Terminate":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeTerminateInterceptors() ?? []
      ) { context in
        return { request in
          self.terminate(request: request, context: context)
        }
      }

    case "LoadAssemblySource":
      return CallHandlerFactory.makeUnary(
        callHandlerContext: callHandlerContext,
        interceptors: self.interceptors?.makeLoadAssemblySourceInterceptors() ?? []
      ) { context in
        return { request in
          self.loadAssemblySource(request: request, context: context)
        }
      }

    default:
      return nil
    }
  }
}

public protocol Stad_Client_StadServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'sayHello'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSayHelloInterceptors() -> [ServerInterceptor<Stad_Client_HelloRequest, Stad_Client_HelloReply>]

  /// - Returns: Interceptors to use when handling 'terminate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeTerminateInterceptors() -> [ServerInterceptor<Stad_Client_TerminateRequest, Stad_Client_TerminateReply>]

  /// - Returns: Interceptors to use when handling 'loadAssemblySource'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoadAssemblySourceInterceptors() -> [ServerInterceptor<Stad_Client_LoadAssemblyRequest, Stad_Client_LoadAssemblyReply>]
}
